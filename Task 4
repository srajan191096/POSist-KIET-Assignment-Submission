// Referred Online Source: https://gist.github.com/twuni/5668121
// This task can be used to encrypt and decrypt the data inside the node.

import java.security.Key;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;



public class Task4 {
Task4(String ownerId,float value,String ownerName,String Hash){
    String ownerId=ownerId;
    float value=value;
    String ownerName=ownerName;
    String Hash=Hash;
}

	public static void main( String [] args ) throws Exception {
        Task4 t0= new Task4("1234567",12.12,"POSist",jObj1.Hash);
		CryptoHelper crypto = new CryptoHelper();
        
		String ciphertext = crypto.encrypt( t0 );
		System.out.println( ciphertext );

		String decrypted = crypto.decrypt( ciphertext );
		System.out.println( decrypted );

	}

	public String encrypt(Task4 t0  ) throws Exception {
		return encrypt( generateIV(), plaintext );
	}

	public String encrypt( byte [] iv, Task4 t0 ) throws Exception {

		byte [] decrypted = t0.getBytes();
		byte [] encrypted = encrypt( iv, decrypted );

		StringBuilder ciphertext = new StringBuilder();

		ciphertext.append( Base64.encodeBase64String( iv ) );
		ciphertext.append( ":" );
		ciphertext.append( Base64.encodeBase64String( encrypted ) );

		return ciphertext.toString();

	}

	public String decrypt( String ciphertext ) throws Exception {
		String [] parts = ciphertext.split( ":" );
		byte [] iv = Base64.decodeBase64( parts[0] );
		byte [] encrypted = Base64.decodeBase64( parts[1] );
		byte [] decrypted = decrypt( iv, encrypted );
		return new String( decrypted );
	}

	private Key key;

	public CryptoHelper( Key key ) {
		this.key = key;
	}

	public CryptoHelper() throws Exception {
		this( generateSymmetricKey() );
	}

	public Key getKey() {
		return key;
	}

	public void setKey( Key key ) {
		this.key = key;
	}

	public static byte [] generateIV() {
		SecureRandom random = new SecureRandom();
		byte [] iv = new byte [16];
		random.nextBytes( iv );
		return iv;
	}

	public static Key generateSymmetricKey() throws Exception {
		KeyGenerator generator = KeyGenerator.getInstance( "AES" );
		SecretKey key = generator.generateKey();
		return key;
	}

	public byte [] encrypt( byte [] iv, byte [] plaintext ) throws Exception {
		Cipher cipher = Cipher.getInstance( key.getAlgorithm() + "/CBC/PKCS5Padding" );
		cipher.init( Cipher.ENCRYPT_MODE, key, new IvParameterSpec( iv ) );
		return cipher.doFinal( plaintext );
	}

	public byte [] decrypt( byte [] iv, byte [] ciphertext ) throws Exception {
		Cipher cipher = Cipher.getInstance( key.getAlgorithm() + "/CBC/PKCS5Padding" );
		cipher.init( Cipher.DECRYPT_MODE, key, new IvParameterSpec( iv ) );
		return cipher.doFinal( ciphertext );
	}

}
